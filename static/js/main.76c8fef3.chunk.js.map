{"version":3,"sources":["maps/HeatMap.js","maps/HexagonMap.js","slider/Slider.js","sidebar/FilterSidebar.js","info/InfoSidebar.js","modal/LoadingModal.js","App.js","reportWebVitals.js","index.js"],"names":["config","INITIAL_VIEW_STATE","longitude","latitude","zoom","maxZoom","pitch","bearing","HeatMap","React","Component","constructor","props","super","this","state","layers","mapData","updateData","setState","generateLayer","data","key","loc","arrLoc","slice","length","split","push","coordinates","parseFloat","weight","HeatmapLayer","id","getPosition","d","getWeight","aggregation","componentWillReceiveProps","nextProps","componentDidMount","render","className","initialViewState","controller","viewState","mapStyle","mapboxApiAccessToken","minZoom","ambientLight","AmbientLight","color","intensity","pointLight1","PointLight","position","pointLight2","lightingEffect","LightingEffect","material","ambient","diffuse","shininess","specularColor","colorRange","HexagonMap","getTooltipInfo","object","lat","lng","count","points","Number","isFinite","toFixed","HexagonLayer","coverage","elevationRange","elevationDomain","elevationScale","extruded","pickable","radius","upperPercentile","transitions","getTooltip","effects","reuseMaps","preventStyleDiffing","mediumYellow","muiTheme","createMuiTheme","overrides","MuiSlider","valueLabel","left","background","thumb","track","rail","opacity","markLabelActive","fontSize","markLabel","mark","height","marks","value","label","months","daysPerMonth","2020","2021","DateSlider","handleChange","event","dateRangeValues","orderedRange","Math","min","max","updateDateRange","toStrings","dateRange","prettifyText","year","floor","toString","start","end","startYear","startDatetime","startMonth","endYear","endMonth","endDay","styles","width","ThemeProvider","theme","Slider","onChange","valueLabelDisplay","aria-labelledby","valueLabelFormat","lightYellow","mediumGrey","lightGrey","h2Style","tStyle","bStyle","toggleStyle","paddingTop","paddingBottom","sliderStyle","paddingLeft","paddingRight","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","fieldNames","FilterSideBar","menuIconClick","setMenuCollapse","menuCollapse","onSubmit","showModal","setTimeout","updateMapData","selectedFilters","switchMapView","mapView","fieldName","handleDateRange","handleChangeMultiple","selectedOptions","target","name","newSelectedFilters","filterOptions","filterData","JSON","parse","stringify","getSidebarContent","ToggleButtonGroup","size","exclusive","aria-label","ToggleButton","backgroundColor","disabled","map","fieldOptions","FormControl","minWidth","maxWidth","Select","labelId","multiple","input","Input","renderValue","selected","join","borderRadius","MenuItem","Checkbox","checked","indexOf","ListItemText","primary","Button","variant","onClick","collapsed","h3Style","InfoSideBar","urlOpenData","urlGithub","href","rel","mStyle","display","alignItems","justifyContent","outline","body","padding","LoadingModal","Modal","open","show","aria-describedby","App","handleDrawerOpen","openSidebar","handleDrawerClose","getMapData","console","log","fetch","then","response","json","filteredData","catch","error","startDate","Date","endDate","datapoint","shouldInclude","thisDate","field","includes","iconData","endDatetime","InfoSidebar","FilterSidebar","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76c8fef3.chunk.js","sourcesContent":["import React from 'react';\nimport {StaticMap} from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport {HeatmapLayer} from '@deck.gl/aggregation-layers';\n\nconst config = {\n  mapboxAccessToken: \"pk.eyJ1IjoibWVsb2R5cGh1IiwiYSI6ImNrbjJlbms0eDE2eTkyb21vb3RpOTJtYmoifQ.KyZkOMUbvjs8btwGKqNyjg\" \n}\n\nconst MAP_STYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\n\nconst INITIAL_VIEW_STATE = {\n    longitude: -74,\n    latitude: 40.75,\n    zoom: 9,\n    maxZoom: 16,\n    pitch: 0,\n    bearing: 0\n  };  \n\n// DeckGL react component\nclass HeatMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            layers: [],\n            mapData: {},\n        }\n    }\n\n    updateData(mapData) {\n        this.setState({\n            mapData: mapData\n        })\n    }\n\n    // updates the general datasets from new props\n    generateLayer() {\n        var data = [];\n\n        for (const key in this.state.mapData) {\n          let datapoint = this.state.mapData[key];\n          let loc = datapoint[\"Location\"];\n          let arrLoc = loc.slice(1, loc.length - 1).split(\", \");\n    \n          if (arrLoc && arrLoc.length === 2) {\n            data.push({coordinates: [parseFloat(arrLoc[0]), parseFloat(arrLoc[1])], weight:1});\n          }\n        }\n    \n        const layer = new HeatmapLayer({\n            id: 'heatmapLayer',\n            data,\n            getPosition: d => d.coordinates,\n            getWeight: d => d.weight,\n            aggregation: 'SUM'\n          });\n        \n        return [layer];\n    }\n\n    // when the props change (ie. global filters should affect the map)\n    componentWillReceiveProps(nextProps) {\n        this.updateData(nextProps.mapData);\n    }\n    \n    // when the component is first created\n    componentDidMount() {\n        this.updateData(this.props.mapData);\n    }\n  \n    render() {\n        return(\n            <div>\n                <DeckGL\n                    className={'HeatMap'}\n                    initialViewState={INITIAL_VIEW_STATE}\n                    controller={true}\n                    layers={this.generateLayer()}\n                    viewState={this.props.viewState}\n                >\n                <StaticMap mapStyle={MAP_STYLE} mapboxApiAccessToken={config.mapboxAccessToken} />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nexport default HeatMap;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    ","import React from 'react';\nimport {render} from 'react-dom';\nimport {StaticMap} from 'react-map-gl';\nimport {AmbientLight, PointLight, LightingEffect} from '@deck.gl/core';\nimport {HexagonLayer} from '@deck.gl/aggregation-layers';\nimport DeckGL from '@deck.gl/react';\n\nconst config = {\n  mapboxAccessToken: \"pk.eyJ1IjoibWVsb2R5cGh1IiwiYSI6ImNrbjJlbms0eDE2eTkyb21vb3RpOTJtYmoifQ.KyZkOMUbvjs8btwGKqNyjg\" \n}\n\nconst MAP_STYLE = 'https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json';\n\nconst INITIAL_VIEW_STATE = {\n    longitude: -74,\n    latitude: 40.75,\n    zoom: 10,\n    minZoom: 10,\n    maxZoom: 20,\n    pitch: 40.5,\n    bearing: 0\n}; \n\nconst ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 1.0\n});\n\nconst pointLight1 = new PointLight({\n    color: [255, 255, 255],\n    intensity: 0.8,\n    position: [-0.144528, 49.739968, 80000]\n});\n\nconst pointLight2 = new PointLight({\n    color: [255, 255, 255],\n    intensity: 0.8,\n    position: [-3.807751, 54.104682, 8000]\n});\n\nconst lightingEffect = new LightingEffect({ambientLight, pointLight1, pointLight2});\n\nconst material = {\n    ambient: 0.64,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [51, 51, 51]\n};\n\nexport const colorRange = [\n  [1, 152, 189],\n  [73, 227, 206],\n  [216, 254, 181],\n  [254, 237, 177],\n  [254, 173, 84],\n  [209, 55, 78]\n];\n\nconst radius = 100;\nconst upperPercentile = 100;\nconst coverage = 0.6;\n\n// DeckGL react component\nclass HexagonMap extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            layers: [],\n            mapData: {},\n        }\n    }\n\n    updateData(mapData) {\n        this.setState({\n            mapData: mapData\n        })\n    }\n\n    getTooltipInfo({object}) {\n        if (!object) {\n          return null;\n        }\n        const lat = object.position[1];\n        const lng = object.position[0];\n        const count = object.points.length;\n      \n        return `\\\n          latitude: ${Number.isFinite(lat) ? lat.toFixed(6) : ''}\n          longitude: ${Number.isFinite(lng) ? lng.toFixed(6) : ''}\n          ${count} Incidents`;\n    }\n\n    // updates the general datasets from new props\n    generateLayer() {\n        var data = [];\n\n        for (const key in this.state.mapData) {\n          let datapoint = this.state.mapData[key];\n          let loc = datapoint[\"Location\"];\n          let arrLoc = loc.slice(1, loc.length - 1).split(\", \");\n    \n          if (arrLoc && arrLoc.length === 2) {\n            data.push({coordinates: [parseFloat(arrLoc[0]), parseFloat(arrLoc[1])], weight:1});\n          }\n        }\n\n        const layer = new HexagonLayer({\n            id: 'heatmap',\n            colorRange,\n            coverage,\n            data,\n            elevationRange: [0, 500],\n            elevationDomain: [0, 5000],\n            elevationScale: data && data.length ? 50 : 0,\n            extruded: true,\n            getPosition: d => d.coordinates,\n            pickable: true,\n            radius,\n            upperPercentile,\n            material,\n            transitions: {\n                elevationScale: 200\n            }\n        });\n        \n        return [layer];\n    }\n\n    // when the props change (ie. global filters should affect the map)\n    componentWillReceiveProps(nextProps) {\n        this.updateData(nextProps.mapData);\n    }\n    \n    // when the component is first created\n    componentDidMount() {\n        this.updateData(this.props.mapData);\n    }\n\n  \n    render() {\n        return(\n            <div>\n                <DeckGL\n                    className={'HexagonMap'}\n                    initialViewState={INITIAL_VIEW_STATE}\n                    controller={true}\n                    layers={this.generateLayer()}\n                    viewState={this.props.viewState}\n                    getTooltip={this.getTooltipInfo}\n                    effects={[lightingEffect]}\n                >\n                <StaticMap reuseMaps mapStyle={MAP_STYLE} preventStyleDiffing={true} mapboxApiAccessToken={config.mapboxAccessToken} />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nexport default HexagonMap;","import React from 'react';\n// import { withStyles/*, makeStyles*/ } from \"@material-ui/core/styles\";\nimport Slider from '@material-ui/core/Slider';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n// import ValueLabel from \"@material-ui/core/Slider/ValueLabel\";\n// import MapsTransferWithinAStation from 'material-ui/svg-icons/maps/transfer-within-a-station';\n\nconst lightYellow = '#ffdd99';\nconst mediumYellow = \"#ffc34b\";\n\nconst muiTheme = createMuiTheme({\n  overrides:{\n    MuiSlider: {\n      valueLabel: { // the little thumb icon pop-up thingy\n        left: '0%',\n        '& *': {\n          background: 'black',\n          color: mediumYellow,\n        },\n      },\n      thumb:{\n        color: mediumYellow,\n      },\n      track: {\n        color: mediumYellow\n      },\n      rail: {\n        opacity:'90%',\n        color: lightYellow\n      },\n      markLabelActive: { // the text below\n        fontSize: \"13px\",\n        color: \"white\",\n      },\n      markLabel: {\n        fontSize: \"13px\",\n        color: \"white\",\n      },\n      mark: { // the tick marks\n        color: \"white\",\n        height: \"5px\",\n      }\n    }\n}\n});\n\nconst marks = [\n  {value: 0, label: \"Jan '20\"},\n  {value: 12, label: \"Jan '21\"},\n  // {value: 14, label: \"Mar '21\"}, // removed cause too much overlap\n];\n\nconst months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst daysPerMonth = [31, {2020: 28, 2021: 27}, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nclass DateSlider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dateRange: [0, 26]\n    };\n  }\n\n  handleChange = (event, dateRangeValues) => {\n    let orderedRange = [Math.min(...dateRangeValues), Math.max(...dateRangeValues)];\n\n    this.props.updateDateRange(this.toStrings(orderedRange));\n\n    this.setState({\n      dateRange: orderedRange\n    })\n  };\n\n  prettifyText = (value) => {\n    let year = 20 + Math.floor(value / 12);\n    let month = months[value % 12];\n\n    return month + \" '\" + year.toString();\n  }\n\n  toStrings = (dateRangeValues) => {\n    const [start, end] = dateRangeValues;\n\n    // handle start date\n    let startYear = 2020 + Math.floor(start / 12);\n    let startMonth = start % 12 + 1;\n    let startDay = 1;\n    let startTime = \"00:00:00 AM\";\n\n    let startDatetime = startMonth.toString() + \"/\" + startDay.toString() + \"/\" + startYear.toString() + \" \" + startTime;\n\n    // handle end date\n    let endYear = 2020 + Math.floor(end / 12);\n    let endMonth = end % 12 + 1;\n    let endDay = (endMonth === 2) ? daysPerMonth[endMonth-1][endYear] : daysPerMonth[endMonth-1];\n    let endTime = \"11:59:59 PM\";\n\n    let endDatetime = endMonth.toString() + \"/\" + endDay.toString() + \"/\" + endYear.toString() + \" \" + endTime;\n\n    return [startDatetime, endDatetime];\n  }\n\n  render() {\n    return (\n      <div styles={{width:300}}>\n        <br/>\n        <ThemeProvider theme={muiTheme}>\n          <Slider\n            value={this.state.dateRange}\n            onChange={this.handleChange}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"discrete-slider-custom\"\n            valueLabelFormat={this.prettifyText}\n            marks={marks}\n            min={0}\n            max={14}\n          />\n        </ThemeProvider>\n      </div>\n    );\n  } \n}\n\nexport default DateSlider;","\nimport React /*,{ Component, useState }*/ from \"react\";\nimport filterData from \"./../data/filterOptions\";\nimport DateSlider from \"./../slider/Slider\";\n\n//import react pro sidebar components\nimport {\n  ProSidebar,\n  SidebarHeader,\n  SidebarContent,\n} from \"react-pro-sidebar\";\n\nimport Button from '@material-ui/core/Button';\n\nimport Input from '@material-ui/core/Input';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\n//import icons from react icons\nimport { /*FiHome, FiLogOut,*/ FiArrowLeftCircle, FiArrowRightCircle } from \"react-icons/fi\";\n\n//import sidebar css from react-pro-sidebar module and our custom css \nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport \"./sidebar.css\";\n\nconst lightYellow = '#ffdd99';\nconst mediumYellow = \"#ffc34b\";\nconst mediumGrey = '#2b2d2f';\nconst lightGrey = '#555658';\n\nconst h2Style = { color: mediumYellow, height: '20px' }\nconst h3Style = { color: 'white', height: '20px' }\nconst tStyle = { color: \"white\" };\nconst bStyle = { color: 'black' };\nconst toggleStyle = {paddingTop: '15px', paddingBottom: '15px'}\nconst sliderStyle = {paddingLeft: '15px', paddingRight: '15px', paddingBottom: '15px'}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nconst fieldNames = [\"borough\", \"neighborhood\", \"Incident Zip\", \"Location Type\"];\n\nclass FilterSideBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuCollapse: false,\n      filterOptions: filterData.filterOptions,\n      selectedFilters: JSON.parse(JSON.stringify(filterData.filterOptions)),\n      dateRange: [\"1/1/2019 00:00:00 AM\", \"3/31/20212 11:59:59 PM\"],\n      mapView: 1,\n    }\n  }\n\n  setMenuCollapse(value) {\n    this.setState({\n      menuCollapse: value\n    })\n  }\n\n  menuIconClick = () => {\n    this.setMenuCollapse(!this.state.menuCollapse);\n  }\n\n  onSubmit = () => {\n    this.props.showModal();\n    setTimeout(() => {this.props.updateMapData(this.state.dateRange, this.state.selectedFilters); }, 2000);\n    \n  }\n\n  switchMapView = (event, value) => {\n    if (value != null) {\n      this.setState({\n        mapView: value\n      });\n\n      this.props.switchMapView(value);\n    }\n    \n  }\n\n  prettifyText = (fieldName) => {\n    if (fieldName === \"borough\"){\n      return \"Borough\";\n    } else if (fieldName === \"neighborhood\") {\n      return \"Neighborhood\";\n    } else {\n      return fieldName;\n    }\n  }\n\n  handleDateRange = (dateRange) => {\n    this.setState({\n      dateRange: dateRange\n    })\n  }\n\n  getSidebarContent() {\n    return (\n      <div>\n        <div style={h2Style} key=\"map type header\">\n            Map Type\n        </div>\n        <div style={toggleStyle}>\n          <ToggleButtonGroup\n            value={this.state.mapView}\n            size=\"small\"\n            exclusive\n            onChange={this.switchMapView}\n            aria-label=\"map view\"\n          >\n            <ToggleButton \n              value={0} \n              aria-label=\"heat map\" \n              style={(this.state.mapView == 0) ? ({\n                backgroundColor: lightGrey, \n                color:lightYellow,\n              }) : ({\n                backgroundColor: mediumGrey,   \n                color:lightYellow,\n              })}\n              disabled={this.state.mapView == 0}\n            >\n              Heat Map\n            </ToggleButton>\n            <ToggleButton \n              value={1} \n              aria-label=\"hexagon map\" \n              style={(this.state.mapView == 1) ? ({\n                backgroundColor: lightGrey, \n                color:lightYellow,\n              }) : ({\n                backgroundColor: mediumGrey,   \n                color:lightYellow,\n              })}\n              disabled={this.state.mapView == 1}\n            >\n              Hexagon Map\n            </ToggleButton>\n          </ToggleButtonGroup>\n        </div>\n        <div style={h2Style} key=\"filter header\">\n            Filters\n        </div>\n        <br/>\n        {fieldNames.map(fieldName => {\n          const fieldOptions = this.state.filterOptions[fieldName];\n          return(\n            <FormControl \n              style={{\n              minWidth: 120,\n              maxWidth: 300\n              }} \n              key = {fieldName+'-form'}\n              id={fieldName+'-form'}>\n              <div style = {tStyle}>{this.prettifyText(fieldName)}</div>\n              <br/>\n              <Select\n                labelId={\"multiple-select-\"+fieldName}\n                id={fieldName}\n                key={fieldName}\n                name={fieldName}\n                multiple\n                value={this.state.selectedFilters[fieldName]}\n                onChange={this.handleChangeMultiple}\n                input={<Input id={fieldName} key={fieldName+'-input'} />}\n                renderValue={(selected) => selected.join(', ')}\n                MenuProps={MenuProps}\n                style={{\n                  backgroundColor: mediumGrey,\n                  color: lightYellow,\n                  paddingLeft: '10px', \n                  width:'260px' , \n                  paddingRight: '5px', \n                  borderRadius: '5px',\n                }}\n              >\n                {fieldOptions.map((name) => {\n                  return (\n                  <MenuItem key={name} value={name} >\n                    <Checkbox \n                      checked={this.state.selectedFilters[fieldName].indexOf(name) > -1} \n                      color=\"default\" // changed from mediumGrey\n                    />\n                    <ListItemText key={name+'-list-item-text'} primary={name} />\n                  </MenuItem>\n                  )\n                })}\n              </Select>\n              <br/>\n            </FormControl>\n          );\n        })}\n        <br/>\n\n        <div style={tStyle}>\n            Select Date Range\n        </div>\n        <div style={sliderStyle}>\n          <DateSlider\n            updateDateRange={this.handleDateRange}\n          />\n        </div>\n        <div style={{paddingTop:'0px'}}>\n          <Button variant=\"contained\" onClick={this.onSubmit} style={{\n            color: mediumYellow, // changed from default\n            size: \"small\",\n            backgroundColor: mediumGrey,\n          }}>Apply Filters</Button>   \n        </div>\n      </div>\n    );\n  }\n\n  handleChangeMultiple = (event) => {\n    const selectedOptions = event.target.value;\n    const fieldName = event.target.name;\n\n    let newSelectedFilters = this.state.selectedFilters;\n    newSelectedFilters[fieldName] = selectedOptions.slice();\n\n    this.setState({\n      selectedFilters: newSelectedFilters,\n    })\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"header\">\n            {/* collapsed props to change menu size using menucollapse state */}\n          <ProSidebar collapsed={this.state.menuCollapse} style = {bStyle}>\n            <SidebarHeader>\n              <div  className='logotext'>\n                {/* small and big change using menucollapse state */}\n                <p>{this.state.menuCollapse ? 'A4' : 'The City that Never Sleeps'}</p>\n              </div>\n              <div className=\"closemenu\" onClick={this.menuIconClick}>\n                  {/* changing menu collapse icon on click */}\n                {this.state.menuCollapse ? (\n                  <div className=\"space\">\n                    <FiArrowRightCircle\n                      color = {mediumYellow}\n                    />\n                  </div>\n                ) : (\n                  <div className=\"space\">\n                    <FiArrowLeftCircle\n                      color = {mediumYellow}\n                    />\n                  </div>\n                )}\n              </div>\n            </SidebarHeader>\n            {!this.state.menuCollapse &&(\n              <div> \n                <div>\n                  <div className=\"space\">\n                    <SidebarContent>\n                      {this.getSidebarContent()}\n                    </SidebarContent>\n                  </div>\n                </div>\n              </div>\n            )}\n          </ProSidebar>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default FilterSideBar;","\n//import useState hook to create menu collapse state\nimport React /*,{ Component, useState }*/ from \"react\";\n\n//import react pro sidebar components\nimport {\n  ProSidebar,\n  SidebarHeader,\n  SidebarFooter,\n  SidebarContent,\n} from \"react-pro-sidebar\";\n\n//import icons from react icons\nimport { FiArrowUpCircle, FiArrowDownCircle } from \"react-icons/fi\";\n\n//import sidebar css from react-pro-sidebar module and our custom css \nimport \"react-pro-sidebar/dist/css/styles.css\";\nimport \"./infosidebar.css\";\n\nconst lightYellow = '#ffdd99';\nconst mediumYellow = \"#ffc34b\";\n\nconst h3Style = { color: mediumYellow, height: '20px' }\nconst bStyle = { color: 'white' };\n\nclass InfoSideBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuCollapse: true,\n      urlOpenData: 'https://data.cityofnewyork.us/Social-Services/311-Noise-Complaints/p5f6-bkga',\n      urlGithub: 'https://github.com/6859-sp21/a4-thecitythatneversleeps',\n    }\n  }\n\n  setMenuCollapse(value) {\n    this.setState({\n      menuCollapse: value\n    })\n  }\n\n  menuIconClick = () => {\n    this.setMenuCollapse(!this.state.menuCollapse);\n  }\n\n  getSidebarContent() {\n    return (\n      <div>\n        <p>\n        <a>\n        The data used in this visualization was gathered from NYC Open Data, a free public data project published \n        by New York City agencies and other partners. Here we have created a compilation of noise complaints in \n        New York City, and you can look at the data yourself \n        </a>\n        <a> </a>\n        <a href={this.state.urlOpenData} style={{color:lightYellow}} rel=\"noreferrer\"> here</a>\n        <a>.</a>\n        </p>\n        <p>\n          On the left, you can toggle instantly between a heat map and hexagon map. You can also filter\n          the data via dropdowns, and select the range of time over which you want to observe aggregate trends. Press the \"apply filters\" button to see the map update. You can pan, zoom, and adjust the angle the map using normal 3D controls. \n        </p>\n        <p>\n          <a>For more information on this project, including how we processed the dataset, check out our Github repository at</a>\n          <a> </a>\n          <a href={this.state.urlGithub} style={{color:lightYellow}} rel=\"noreferrer\">this link</a>\n          <a>.</a>\n        </p>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <div id=\"info-header\" style={bStyle}>\n            {/* collapsed props to change menu size using menucollapse state */}\n          <ProSidebar className=\"pro-sidebar\" collapsed={this.state.menuCollapse} style = {bStyle}>\n            <SidebarHeader className=\"pro-sidebar-header\">\n              <div onClick={this.menuIconClick}>\n                    {/* changing menu collapse icon on click */}\n                  {this.state.menuCollapse ? (\n                    <div className=\"space\">\n                      <FiArrowDownCircle\n                        color = {mediumYellow}\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"space\">\n                      <FiArrowUpCircle\n                        color = {mediumYellow}\n                      />\n                    </div>\n                  )}\n                </div>\n            </SidebarHeader>\n            {!this.state.menuCollapse &&(\n              <div> \n                <div>\n                  <div className=\"space\">\n                    <SidebarContent>\n                      {this.getSidebarContent()}\n                    </SidebarContent>\n                  </div>\n                  <div className=\"bottom-space\">\n                    <SidebarFooter>\n                    <div style = {h3Style}>Amanda Horne, Melody Phu, Magdalena Price</div>\n                    </SidebarFooter>\n                  </div>\n                </div>\n              </div>\n            )}\n          </ProSidebar>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default InfoSideBar;","import React from \"react\";\nimport Modal from '@material-ui/core/Modal';\n\nconst hStyle = { color: '#ffdd99', height: '20px', padding:'20px' };\n\nconst mStyle = {\n    display:'flex',\n    alignItems:'center',\n    justifyContent:'center',\n    \"&:hover\": {\n        outline: \"none\"\n      },\n      \"&:focus\": {\n        outline: \"none\"\n    }\n}\n\nconst body = (\n    <div>\n      <h2 id=\"simple-modal-title\" color=\"#ffdd99\">\n            <div style={hStyle}>\n                Data Loading ...\n            </div>\n      </h2>\n    </div>\n);\n\nexport default class LoadingModal extends React.Component {\n\n    render() {\n        return (\n            <Modal\n                style={mStyle}\n                open={this.props.show}\n                // onClose={this.props.handleClose} // we close this automatically\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\">\n                <div className=\"textspace\">\n                    {body}\n                </div>\n            </Modal>\n        );\n\n  }\n}","import React from 'react';\nimport './App.css';\n\nimport filterData from \"./data/filterOptions\";\nimport HeatMap from \"./maps/HeatMap\";\nimport HexagonMap from \"./maps/HexagonMap\";\nimport FilterSidebar from \"./sidebar/FilterSidebar\";\nimport InfoSidebar from \"./info/InfoSidebar\";\nimport LoadingModal from \"./modal/LoadingModal\";\n\n\n\nconst dataURL = 'https://thecitythatneversleep.s3.us-east-2.amazonaws.com/allMapData.json';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n      mapView: 1, // heat map = 0, hexagon map = 1\n      mapData: [],\n      filteredData: [],\n      layers: [],\n      iconData: [],\n      startDatetime: 'January 1, 2019, 00:00:00 AM',\n      endDatetime: 'March 31, 2021, 11:59:59 PM',\n      // add any other default filter parameters here\n      openSidebar: false,\n      filterOptions: filterData.filterOptions,\n    }\n  }\n\n  handleDrawerOpen = () => {\n    this.setState({\n      openSidebar: true\n    })\n  };\n\n  handleDrawerClose = () => {\n    this.setState({\n      openSidebar: false\n    })\n  };\n\n  showModal = () => {\n    this.setState({\n      show: true,\n    })\n  }\n\n  // gets map data\n  getMapData = () => {\n    console.log(\"fetching data\");\n    fetch(dataURL)\n      .then(response => response.json())\n      .then((mapData) => {\n        console.log(\"success!\");\n        this.setState({\n          show: false,\n          mapData: mapData,\n          filteredData: JSON.parse(JSON.stringify(mapData))\n        })\n      })\n      .catch((error) => {\n        // handle your errors here\n        console.error(error);\n      })\n  }\n\n  switchMapView = (value) => {\n    this.setState({\n      mapView: value\n    })\n  }\n\n  updateMapData = (dateRange, selectedFilters) => {\n    const startDate = new Date(dateRange[0]);\n    const endDate = new Date(dateRange[1]);\n    \n    let mapData = this.state.mapData;\n    var filteredData = [];\n\n    for (const datapoint of mapData) {\n      let shouldInclude = true;\n\n      // compare dates\n      let thisDate = new Date(datapoint['Created Date']);\n      if (thisDate > endDate || thisDate < startDate) {\n        shouldInclude = false;\n      }\n\n      // check all filters\n      for (const field in selectedFilters) {\n        let selectedOptions = selectedFilters[field];\n        let value = datapoint[field];\n\n        // once it doesn't match one of the filters, drop it\n        if (!selectedOptions.includes(value)) {\n          shouldInclude = false;\n        }\n      }\n\n      // add to new filtered dataset\n      if (shouldInclude) {\n        filteredData.push(JSON.parse(JSON.stringify(datapoint)));\n      }\n    }\n\n    this.setState({\n      show: false,\n      filteredData: filteredData\n    })\n  }\n\n  componentDidMount() {\n    this.getMapData();\n\n    this.setState({\n      filterOptions: filterData.filterOptions,\n    })\n  }\n\n  render(viewState) {\n    return (\n      <div> \n        {(this.state.mapView === 0) ? (\n          <HeatMap \n            mapData={this.state.filteredData}\n            viewState={viewState}\n          >\n          </HeatMap>\n        ) : (\n          <HexagonMap \n            mapData={this.state.filteredData}\n            viewState={viewState}\n          >\n          </HexagonMap>\n        )}\n        <InfoSidebar/>\n        <FilterSidebar \n          updateMapData={this.updateMapData} \n          open={this.state.openSidebar}\n          filterOptions={this.state.filterOptions}\n          showModal={this.showModal}\n          switchMapView={this.switchMapView}\n        >\n        </FilterSidebar>\n        <LoadingModal show={this.state.show}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}